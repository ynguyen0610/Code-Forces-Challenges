/*
Summary:
- n numbers of passwords
- forgot Codehorses password
- enter n passwords (non-decreasing order, same length)
- a password is entered only once
- entering password: 1s
- failed tries: k
- after k: 5s
Idea:
- Number of passwords of each length
- Min time: No freezing, num < correct password length + 1
- Max time: num <= correct password length
Edge cases:
- Last input is the correct answer
Input:
- n num of passwords + k num of failed tries
- passwords - one per line, letters + integers
- last line: password
Output:
- time best case
- time worst case
*/

import java.util.*;
import java.util.Scanner;

public class Main {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    // each password length does not exceed 100 
    String[] password = new String[N];
    for (int i = 0; i < N; i++) {
      password[i] = sc.next();
    }
    int less = 0;
    int equal = 0;
    String correctPW = sc.next();
    for (int i = 0; i < N; i++) {
      if (password[i].length() < correctPW.length()) less++;
      if (password[i].length() == correctPW.length()) equal++;
      // if (password[i].length() > correctPW.length()) break;
    }
    int bestCase = less + 1 + (less/K) * 5;
    int worstCase = less + equal + ((less + equal - 1)/K) * 5;
    System.out.println(bestCase + " " + worstCase);
  }
}
